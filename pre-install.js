
// This script runs before npm install to create mock packages for platform-specific dependencies
const fs = require('fs');
const path = require('path');
console.log('Running pre-install script for platform-specific dependencies');

// Create node_modules directory if it doesn't exist
const nodeModulesDir = path.join(__dirname, 'node_modules');
if (!fs.existsSync(nodeModulesDir)) {
  fs.mkdirSync(nodeModulesDir, { recursive: true });
  console.log('Created node_modules directory');
}

// Create mock packages for platform-specific rollup dependencies
const platformSpecificPackages = [
  '@rollup/rollup-win32-x64-msvc',
  '@rollup/rollup-linux-x64-gnu',
  '@rollup/rollup-darwin-x64',
  '@rollup/rollup-darwin-arm64'
];

platformSpecificPackages.forEach(packageName => {
  const packageParts = packageName.split('/');
  const scopeDir = path.join(nodeModulesDir, packageParts[0]);
  const packageDir = path.join(scopeDir, packageParts[1]);
  
  // Create scope directory if it doesn't exist
  if (!fs.existsSync(scopeDir)) {
    fs.mkdirSync(scopeDir, { recursive: true });
  }
  
  // Create package directory if it doesn't exist
  if (!fs.existsSync(packageDir)) {
    fs.mkdirSync(packageDir, { recursive: true });
    
    // Create package.json with explicit os and cpu fields set to "any"
    const packageJson = {
      name: packageName,
      version: "0.0.0",
      main: "index.js",
      os: ["any"],
      cpu: ["any"]
    };
    
    fs.writeFileSync(
      path.join(packageDir, 'package.json'),
      JSON.stringify(packageJson, null, 2)
    );
    
    // Create empty index.js
    fs.writeFileSync(
      path.join(packageDir, 'index.js'),
      `
// Mock implementation for ${packageName}
console.log('Loading mock for ${packageName}');
const noop = () => {};
module.exports = {
  VERSION: '4.40.0',
  rollup: async () => ({
    generate: async () => ({ output: [] }),
    write: async () => ({ output: [] }),
    close: noop
  }),
  watch: () => ({ close: noop }),
  createFilter: () => () => true,
  dataToEsm: (data) => \`export default \${JSON.stringify(data)};\`,
  normalizePath: (path) => path,
  defineConfig: (config) => config
};
`
    );
    
    console.log(`Created mock package for ${packageName}`);
  }
});

// Also create .npmrc file to enforce platform-independent behavior
try {
  const npmrcPath = path.join(__dirname, '.npmrc');
  const npmrcContent = `
# Generated by pre-install script
optional=false
fund=false
audit=false
legacy-peer-deps=true
platform-dep-check=false
`;
  
  fs.writeFileSync(npmrcPath, npmrcContent, { flag: 'a' });
  console.log('Updated .npmrc file');
} catch (error) {
  console.warn('Warning: Could not update .npmrc file', error);
}

console.log('Pre-install script completed successfully');
